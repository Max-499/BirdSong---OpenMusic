; OM File Header - Saved 2025/09/12 22:14:39
; (7.06 :patc (om-make-point 15 87) (om-make-point 153 287) (om-make-point 1809 853) "" 183 0 "2025/09/12 18:32:11" "2025/09/12 22:14:39")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "BirdSongPermut" (quote ((let ((box (om-load-boxcall (quote genfun) "SAVE-AS-MIDI" (quote save-as-midi) (quote ((om-load-inputfun (quote input-funbox) "" "OBJECT" nil))) (om-make-point 1049 660) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Repeater" (om-load-patch-abs1 "Repeater" (quote ((let ((box (om-load-boxin "input 4" 3 (om-make-point 562 33) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 455 35) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 315 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 166 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 4" 3 (om-make-point 493 464) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 348 456) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 263 462) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 187 453) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 7.06 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (onset-blocks)$  \"Verschiebt eine Liste von Onset-Blocks so, dass jeder Block$   direkt nach dem vorherigen folgt. Keine Durations nötig.\"$  (let ((result '())$        (time 0))  ;; aktueller Offset$    (dolist (block onset-blocks)$      (let ((shifted (mapcar (lambda (o) (+ o time)) block))$            (block-max (reduce #'max block)))$        (push shifted result)$        (setf time (+ time block-max))))$    (nreverse result)))$") (quote ((om-load-inputfun (quote input-funbox) "" "ONSET-BLOCKS" nil))) (om-make-point 342 304) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 664 128) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 501 128) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 403 138) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 267 133) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 638 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 474 190) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 366 197) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 186 207) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 653 332) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 470 321) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 269 349) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 134 317) (om-make-point 113 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((17 0 4 0 nil 0) (18 0 5 0 nil 0) (19 0 6 0 nil 0) (20 0 7 0 nil 0) (15 0 8 0 nil 0) (0 0 13 0 nil 0) (9 0 13 1 nil 0) (1 0 14 0 nil 0) (10 0 14 1 nil 0) (2 0 15 0 nil 0) (11 0 15 1 nil 0) (3 0 16 0 nil 0) (12 0 16 1 nil 0) (13 0 17 0 nil 0) (14 0 18 0 nil 0) (8 0 19 0 nil 0) (16 0 20 0 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil))) (om-make-point 732 433) (om-make-point 83 67) (list (list 6100 12000 6200 11400 11000 6200 10800 6600 10100 7000 9700 8800 7000 8700 7500 8300 1600 8300 6100 12000 6200 11400 11000 6200 10800 6600 10100 7000 9700 8800 7000 8700 7500 8300 1600 8300 6100 12000 6200 11400 11000 6200 10800 6600 10100 7000 9700 8800 7000 8700 7500 8300 1600 8300 6100 12000 6200 11400 11000 6200 10800 6600 10100 7000 9700 8800 7000 8700 7500 8300 1600 8300 6100 12000 6200 11400 11000 6200 10800 6600 10100 7000 9700 8800 7000 8700 7500 8300 1600 8300 6100 12000 6200 11400 11000 6200 10800 6600 10100 7000 9700 8800 7000 8700 7500 8300 1600 8300 6100 12000 6200 11400 11000 6200 10800 6600 10100 7000 9700 8800 7000 8700 7500 8300 1600 8300 6100 12000 6200 11400 11000 6200 10800 6600 10100 7000 9700 8800 7000 8700 7500 8300 1600 8300) (list 2191.3784 2627.151 3110.7107 3147.1199 3786.5562 3995.9092 4604.6255 4919.7925 5217.8926 5564.918 5724.208 6262.3814 6266.9326 6689.052 6999.668 7346.693 7524.1875 7901.933 8869.053 11060.432 11496.203 11979.764 12016.173 12655.609 12864.962 13473.678 13788.846 14086.945 14433.971 14593.261 15131.434 15135.985 15558.1045 15868.721 16215.746 16393.24 16770.987 17738.106 19929.485 20365.256 20848.817 20885.225 21524.663 21734.016 22342.73 22657.899 22955.999 23303.024 23462.313 24000.487 24005.04 24427.157 24737.774 25084.799 25262.293 25640.04 26607.159 28798.538 29234.309 29717.87 29754.278 30393.715 30603.067 31211.784 31526.952 31825.05 32172.077 32331.368 32869.54 32874.09 33296.21 33606.83 33953.85 34131.344 34509.09 35476.21 37667.59 38103.364 38586.92 38623.332 39262.766 39472.12 40080.836 40396.004 40694.1 41041.13 41200.418 41738.594 41743.145 42165.26 42475.88 42822.903 43000.4 43378.145 44345.266 46536.645 46972.418 47455.977 47492.387 48131.82 48341.176 48949.89 49265.06 49563.157 49910.184 50069.473 50607.65 50612.2 51034.317 51344.934 51691.957 51869.454 52247.2 53214.32 55405.7 55841.473 56325.03 56361.44 57000.875 57210.23 57818.946 58134.114 58432.21 58779.24 58938.528 59476.704 59481.254 59903.37 60213.99 60561.01 60738.508 61116.254 62083.375 64274.754 64710.528 65194.086 65230.497 65869.93 66079.28 66688.0 67003.164 67301.266 67648.3 67807.586 68345.76 68350.305 68772.43 69083.05 69430.07 69607.56 69985.305 70952.43) (list 656 1500 507 1431 1012 1118 1093 646 1025 693 1230 284 457 1284 1148 192 732 1300 656 1500 507 1431 1012 1118 1093 646 1025 693 1230 284 457 1284 1148 192 732 1300 656 1500 507 1431 1012 1118 1093 646 1025 693 1230 284 457 1284 1148 192 732 1300 656 1500 507 1431 1012 1118 1093 646 1025 693 1230 284 457 1284 1148 192 732 1300 656 1500 507 1431 1012 1118 1093 646 1025 693 1230 284 457 1284 1148 192 732 1300 656 1500 507 1431 1012 1118 1093 646 1025 693 1230 284 457 1284 1148 192 732 1300 656 1500 507 1431 1012 1118 1093 646 1025 693 1230 284 457 1284 1148 192 732 1300 656 1500 507 1431 1012 1118 1093 646 1025 693 1230 284 457 1284 1148 192 732 1300) (list 87 115 86 113 112 87 109 89 108 90 105 104 90 102 93 102 50 101 87 115 86 113 112 87 109 89 108 90 105 104 90 102 93 102 50 101 87 115 86 113 112 87 109 89 108 90 105 104 90 102 93 102 50 101 87 115 86 113 112 87 109 89 108 90 105 104 90 102 93 102 50 101 87 115 86 113 112 87 109 89 108 90 105 104 90 102 93 102 50 101 87 115 86 113 112 87 109 89 108 90 105 104 90 102 93 102 50 101 87 115 86 113 112 87 109 89 108 90 105 104 90 102 93 102 50 101 87 115 86 113 112 87 109 89 108 90 105 104 90 102 93 102 50 101)) nil "Repeater"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Repeater" (om-load-patch-abs1 "Repeater" (quote ((let ((box (om-load-boxin "input 4" 3 (om-make-point 562 33) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 455 35) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 315 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 166 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 4" 3 (om-make-point 493 464) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 348 456) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 263 462) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 187 453) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 7.06 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (onset-blocks)$  \"Verschiebt eine Liste von Onset-Blocks so, dass jeder Block$   direkt nach dem vorherigen folgt. Keine Durations nötig.\"$  (let ((result '())$        (time 0))  ;; aktueller Offset$    (dolist (block onset-blocks)$      (let ((shifted (mapcar (lambda (o) (+ o time)) block))$            (block-max (reduce #'max block)))$        (push shifted result)$        (setf time (+ time block-max))))$    (nreverse result)))$") (quote ((om-load-inputfun (quote input-funbox) "" "ONSET-BLOCKS" nil))) (om-make-point 342 304) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 664 128) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 501 128) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 403 138) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 267 133) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 638 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 474 190) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 366 197) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 186 207) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 653 332) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 470 321) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 269 349) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 134 317) (om-make-point 113 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((17 0 4 0 nil 0) (18 0 5 0 nil 0) (19 0 6 0 nil 0) (20 0 7 0 nil 0) (15 0 8 0 nil 0) (0 0 13 0 nil 0) (9 0 13 1 nil 0) (1 0 14 0 nil 0) (10 0 14 1 nil 0) (2 0 15 0 nil 0) (11 0 15 1 nil 0) (3 0 16 0 nil 0) (12 0 16 1 nil 0) (13 0 17 0 nil 0) (14 0 18 0 nil 0) (8 0 19 0 nil 0) (16 0 20 0 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil))) (om-make-point 437 427) (om-make-point 92 67) (list (list 7600 6400 5900 4700 5500 6000 7600 6400 5900 4700 5500 6000 7600 6400 5900 4700 5500 6000 7600 6400 5900 4700 5500 6000 7600 6400 5900 4700 5500 6000 7600 6400 5900 4700 5500 6000 7600 6400 5900 4700 5500 6000 7600 6400 5900 4700 5500 6000) (list 3787.6392 4173.348 4747.103 5289.8735 5948.0357 6878.652 10094.673 13882.3125 14268.021 14841.775 15384.547 16042.709 16973.325 20189.346 23976.985 24362.694 24936.45 25479.219 26137.38 27067.999 30284.02 34071.66 34457.368 35031.12 35573.895 36232.055 37162.67 40378.69 44166.332 44552.04 45125.793 45668.567 46326.727 47257.344 50473.364 54261.004 54646.71 55220.465 55763.24 56421.4 57352.016 60568.036 64355.676 64741.383 65315.137 65857.91 66516.07 67446.69 70662.71 74450.35 74836.06 75409.81 75952.586 76610.75 77541.36 80757.38) (list 709 1298 1167 2503 3080 2464 709 1298 1167 2503 3080 2464 709 1298 1167 2503 3080 2464 709 1298 1167 2503 3080 2464 709 1298 1167 2503 3080 2464 709 1298 1167 2503 3080 2464 709 1298 1167 2503 3080 2464 709 1298 1167 2503 3080 2464) (list 127 108 93 64 80 98 127 108 93 64 80 98 127 108 93 64 80 98 127 108 93 64 80 98 127 108 93 64 80 98 127 108 93 64 80 98 127 108 93 64 80 98 127 108 93 64 80 98)) nil "Repeater"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Repeater" (om-load-patch-abs1 "Repeater" (quote ((let ((box (om-load-boxin "input 4" 3 (om-make-point 562 33) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 455 35) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 315 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 166 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 4" 3 (om-make-point 493 464) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 348 456) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 263 462) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 187 453) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 7.06 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (onset-blocks)$  \"Verschiebt eine Liste von Onset-Blocks so, dass jeder Block$   direkt nach dem vorherigen folgt. Keine Durations nötig.\"$  (let ((result '())$        (time 0))  ;; aktueller Offset$    (dolist (block onset-blocks)$      (let ((shifted (mapcar (lambda (o) (+ o time)) block))$            (block-max (reduce #'max block)))$        (push shifted result)$        (setf time (+ time block-max))))$    (nreverse result)))$") (quote ((om-load-inputfun (quote input-funbox) "" "ONSET-BLOCKS" nil))) (om-make-point 342 304) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 664 128) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 501 128) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 403 138) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 267 133) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 638 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 474 190) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 366 197) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 186 207) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 653 332) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 470 321) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 269 349) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 134 317) (om-make-point 113 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((17 0 4 0 nil 0) (18 0 5 0 nil 0) (19 0 6 0 nil 0) (20 0 7 0 nil 0) (15 0 8 0 nil 0) (0 0 13 0 nil 0) (9 0 13 1 nil 0) (1 0 14 0 nil 0) (10 0 14 1 nil 0) (2 0 15 0 nil 0) (11 0 15 1 nil 0) (3 0 16 0 nil 0) (12 0 16 1 nil 0) (13 0 17 0 nil 0) (14 0 18 0 nil 0) (8 0 19 0 nil 0) (16 0 20 0 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil))) (om-make-point 186 416) (om-make-point 99 67) (list (list 6800 7500 6800 6000 7200 5300 8700 8800 4400 2900 3100 2900 3100 2800 2900 3100 3300 6800 7500 6800 6000 7200 5300 8700 8800 4400 2900 3100 2900 3100 2800 2900 3100 3300 6800 7500 6800 6000 7200 5300 8700 8800 4400 2900 3100 2900 3100 2800 2900 3100 3300 6800 7500 6800 6000 7200 5300 8700 8800 4400 2900 3100 2900 3100 2800 2900 3100 3300 6800 7500 6800 6000 7200 5300 8700 8800 4400 2900 3100 2900 3100 2800 2900 3100 3300 6800 7500 6800 6000 7200 5300 8700 8800 4400 2900 3100 2900 3100 2800 2900 3100 3300 6800 7500 6800 6000 7200 5300 8700 8800 4400 2900 3100 2900 3100 2800 2900 3100 3300 6800 7500 6800 6000 7200 5300 8700 8800 4400 2900 3100 2900 3100 2800 2900 3100 3300) (list 4691.813 5450.398 6225.629 6489.588 7098.3584 7246.984 7521.644 8361.082 8383.673 9131.557 9879.44 10627.325 11375.209 12123.093 12870.977 13618.86 14366.745 17279.807 21971.62 22730.206 23505.436 23769.395 24378.165 24526.791 24801.452 25640.889 25663.48 26411.364 27159.247 27907.133 28655.016 29402.899 30150.784 30898.668 31646.55 34559.614 39251.426 40010.01 40785.243 41049.204 41657.973 41806.598 42081.258 42920.696 42943.286 43691.17 44439.055 45186.938 45934.82 46682.707 47430.59 48178.473 48926.36 51839.42 56531.235 57289.82 58065.05 58329.008 58937.78 59086.407 59361.067 60200.504 60223.094 60970.977 61718.864 62466.747 63214.633 63962.516 64710.4 65458.28 66206.164 69119.23 73811.04 74569.625 75344.86 75608.81 76217.586 76366.21 76640.87 77480.31 77502.9 78250.78 78998.664 79746.555 80494.44 81242.32 81990.2 82738.086 83485.97 86399.03 91090.84 91849.43 92624.66 92888.62 93497.39 93646.016 93920.67 94760.11 94782.7 95530.586 96278.47 97026.36 97774.24 98522.125 99270.01 100017.89 100765.77 103678.836 108370.65 109129.235 109904.47 110168.42 110777.196 110925.82 111200.48 112039.92 112062.51 112810.39 113558.27 114306.164 115054.05 115801.93 116549.81 117297.696 118045.58 120958.64 125650.45 126409.04 127184.266 127448.23 128057.0 128205.625 128480.28 129319.72 129342.31 130090.196 130838.08 131585.97 132333.85 133081.74 133829.63 134577.5 135325.39 138238.46) (list 2147 2622 547 1603 34 583 3049 431 1854 2724 2166 2985 2757 2344 2996 2737 2295 2147 2622 547 1603 34 583 3049 431 1854 2724 2166 2985 2757 2344 2996 2737 2295 2147 2622 547 1603 34 583 3049 431 1854 2724 2166 2985 2757 2344 2996 2737 2295 2147 2622 547 1603 34 583 3049 431 1854 2724 2166 2985 2757 2344 2996 2737 2295 2147 2622 547 1603 34 583 3049 431 1854 2724 2166 2985 2757 2344 2996 2737 2295 2147 2622 547 1603 34 583 3049 431 1854 2724 2166 2985 2757 2344 2996 2737 2295 2147 2622 547 1603 34 583 3049 431 1854 2724 2166 2985 2757 2344 2996 2737 2295 2147 2622 547 1603 34 583 3049 431 1854 2724 2166 2985 2757 2344 2996 2737 2295) (list 101 102 63 88 105 82 127 67 94 105 76 117 117 90 88 102 105 101 102 63 88 105 82 127 67 94 105 76 117 117 90 88 102 105 101 102 63 88 105 82 127 67 94 105 76 117 117 90 88 102 105 101 102 63 88 105 82 127 67 94 105 76 117 117 90 88 102 105 101 102 63 88 105 82 127 67 94 105 76 117 117 90 88 102 105 101 102 63 88 105 82 127 67 94 105 76 117 117 90 88 102 105 101 102 63 88 105 82 127 67 94 105 76 117 117 90 88 102 105 101 102 63 88 105 82 127 67 94 105 76 117 117 90 88 102 105)) nil "Repeater"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Repeater" (om-load-patch-abs1 "Repeater" (quote ((let ((box (om-load-boxin "input 4" 3 (om-make-point 562 33) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 3" 2 (om-make-point 455 35) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input 2" 1 (om-make-point 315 29) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 166 45) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 4" 3 (om-make-point 493 464) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 3" 2 (om-make-point 348 456) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output 2" 1 (om-make-point 263 462) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 187 453) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 7.06 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (onset-blocks)$  \"Verschiebt eine Liste von Onset-Blocks so, dass jeder Block$   direkt nach dem vorherigen folgt. Keine Durations nötig.\"$  (let ((result '())$        (time 0))  ;; aktueller Offset$    (dolist (block onset-blocks)$      (let ((shifted (mapcar (lambda (o) (+ o time)) block))$            (block-max (reduce #'max block)))$        (push shifted result)$        (setf time (+ time block-max))))$    (nreverse result)))$") (quote ((om-load-inputfun (quote input-funbox) "" "ONSET-BLOCKS" nil))) (om-make-point 342 304) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 664 128) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 501 128) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 403 138) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 267 133) (om-make-point 27 30) 8 "8" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 638 199) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 474 190) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N 2" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 366 197) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REPEAT-N" (quote repeat-n) (quote ((om-load-inputfun (quote input-funbox) "something" "SELF" nil) (om-load-inputfun (quote input-funbox) "times" "N" 0))) (om-make-point 186 207) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 653 332) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 470 321) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 269 349) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 134 317) (om-make-point 113 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((17 0 4 0 nil 0) (18 0 5 0 nil 0) (19 0 6 0 nil 0) (20 0 7 0 nil 0) (15 0 8 0 nil 0) (0 0 13 0 nil 0) (9 0 13 1 nil 0) (1 0 14 0 nil 0) (10 0 14 1 nil 0) (2 0 15 0 nil 0) (11 0 15 1 nil 0) (3 0 16 0 nil 0) (12 0 16 1 nil 0) (13 0 17 0 nil 0) (14 0 18 0 nil 0) (8 0 19 0 nil 0) (16 0 20 0 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 824 579)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil) (om-load-inputfun (quote input-funbox) "" "input 3" nil) (om-load-inputfun (quote input-funbox) "" "input 4" nil))) (om-make-point 1532 480) nil (list (list 6300 12000 6200 11500 11500 6000 10400 6600 9500 7000 9600 9400 7000 8500 7300 8400 1200 8000 6300 12000 6200 11500 11500 6000 10400 6600 9500 7000 9600 9400 7000 8500 7300 8400 1200 8000 6300 12000 6200 11500 11500 6000 10400 6600 9500 7000 9600 9400 7000 8500 7300 8400 1200 8000 6300 12000 6200 11500 11500 6000 10400 6600 9500 7000 9600 9400 7000 8500 7300 8400 1200 8000 6300 12000 6200 11500 11500 6000 10400 6600 9500 7000 9600 9400 7000 8500 7300 8400 1200 8000 6300 12000 6200 11500 11500 6000 10400 6600 9500 7000 9600 9400 7000 8500 7300 8400 1200 8000 6300 12000 6200 11500 11500 6000 10400 6600 9500 7000 9600 9400 7000 8500 7300 8400 1200 8000) (list 2361.7464 2831.9678 3353.2542 3392.6167 4081.9912 4307.5273 4963.923 5303.2905 5624.573 5999.0483 6170.328 6750.1265 6755.4453 7210.773 7544.822 7919.297 8110.79 8518.244 9492.73 11854.477 12324.698 12845.984 12885.348 13574.722 13800.258 14456.653 14796.021 15117.304 15491.779 15663.059 16242.857 16248.176 16703.504 17037.553 17412.028 17603.52 18010.975 18985.46 21347.208 21817.43 22338.715 22378.079 23067.454 23292.989 23949.383 24288.752 24610.036 24984.51 25155.79 25735.588 25740.907 26196.235 26530.284 26904.758 27096.25 27503.706 28478.192 30839.938 31310.16 31831.446 31870.809 32560.184 32785.72 33442.114 33781.48 34102.766 34477.24 34648.52 35228.317 35233.637 35688.965 36023.01 36397.49 36588.98 36996.438 37970.92 40332.668 40802.89 41324.176 41363.54 42052.915 42278.45 42934.844 43274.21 43595.497 43969.97 44141.25 44721.047 44726.368 45181.696 45515.743 45890.22 46081.71 46489.165 47463.653 49825.4 50295.62 50816.907 50856.27 51545.645 51771.18 52427.575 52766.94 53088.227 53462.7 53633.98 54213.778 54219.098 54674.426 55008.473 55382.95 55574.44 55981.9 56956.383 59318.13 59788.35 60309.637 60349.0 61038.375 61263.91 61920.305 62259.67 62580.957 62955.43 63126.71 63706.508 63711.83 64167.157 64501.204 64875.68 65067.17 65474.625 66449.11) (list 405 1180 70 1472 983 1551 281 831 919 575 398 159 1116 717 1160 54 937 436 405 1180 70 1472 983 1551 281 831 919 575 398 159 1116 717 1160 54 937 436 405 1180 70 1472 983 1551 281 831 919 575 398 159 1116 717 1160 54 937 436 405 1180 70 1472 983 1551 281 831 919 575 398 159 1116 717 1160 54 937 436 405 1180 70 1472 983 1551 281 831 919 575 398 159 1116 717 1160 54 937 436 405 1180 70 1472 983 1551 281 831 919 575 398 159 1116 717 1160 54 937 436 405 1180 70 1472 983 1551 281 831 919 575 398 159 1116 717 1160 54 937 436) (list 87 115 86 113 112 87 109 89 108 90 105 104 90 102 93 102 50 101 87 115 86 113 112 87 109 89 108 90 105 104 90 102 93 102 50 101 87 115 86 113 112 87 109 89 108 90 105 104 90 102 93 102 50 101 87 115 86 113 112 87 109 89 108 90 105 104 90 102 93 102 50 101 87 115 86 113 112 87 109 89 108 90 105 104 90 102 93 102 50 101 87 115 86 113 112 87 109 89 108 90 105 104 90 102 93 102 50 101 87 115 86 113 112 87 109 89 108 90 105 104 90 102 93 102 50 101)) nil "Repeater"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 1483 53) (om-make-point 185 116) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6200) (11800) (6200) (11200) (11300) (6200) (10600) (6500) (9800) (6700) (9400) (9100) (6700) (8500) (7000) (8600) (1500) (8200))) :lonset (quote (2220 2662 3152 3189 3837 4049 4666 4985 5287 5639 5800 6345 6350 6778 7092 7444 7624 8007 8923)) :ldur (quote ((655) (1040) (143) (1675) (859) (1356) (676) (522) (887) (635) (873) (222) (1033) (365) (1295) (477) (359) (916))) :lvel (quote ((87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 438 657) (om-make-point 954 570) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "pitch 2" (om-load-patch-abs1 "pitch" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 413) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 131 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ADD-OR-SUBTRACT" (quote add-or-subtract) (quote ((om-load-inputfun (quote input-funbox) "A" "A" nil) (om-load-inputfun (quote input-funbox) "B" "B" nil))) (om-make-point 178 262) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 293 313) (om-make-point 32 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 386 322) (om-make-point 31 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 62 286) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 158 193) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 373 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 364 180) (om-make-point 32 34) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 437 186) (om-make-point 26 35) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (3 0 2 1 nil 0) (7 0 3 0 nil 0) (4 0 3 1 nil 0) (2 0 5 0 nil 0) (6 0 5 1 nil 0) (1 0 6 0 nil 0) (8 0 7 0 nil 0) (9 0 7 1 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 11707/8 3003/8) nil (list (list 6300 12000 6200 11500 11500 6000 10400 6600 9500 7000 9600 9400 7000 8500 7300 8400 1200 8000)) nil "pitch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 1457 601) (om-make-point 185 116) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6500) (11700) (6100) (11100) (11400) (6500) (10500) (6600) (9800) (6500) (9700) (8900) (6800) (8300) (7000) (8800) (1500) (8000) (6500) (11700) (6100) (11100) (11400) (6500) (10500) (6600) (9800) (6500) (9700) (8900) (6800) (8300) (7000) (8800) (1500) (8000) (6500) (11700) (6100) (11100) (11400) (6500) (10500) (6600) (9800) (6500) (9700) (8900) (6800) (8300) (7000) (8800) (1500) (8000) (6500) (11700) (6100) (11100) (11400) (6500) (10500) (6600) (9800) (6500) (9700) (8900) (6800) (8300) (7000) (8800) (1500) (8000) (6500) (11700) (6100) (11100) (11400) (6500) (10500) (6600) (9800) (6500) (9700) (8900) (6800) (8300) (7000) (8800) (1500) (8000) (6500) (11700) (6100) (11100) (11400) (6500) (10500) (6600) (9800) (6500) (9700) (8900) (6800) (8300) (7000) (8800) (1500) (8000) (6500) (11700) (6100) (11100) (11400) (6500) (10500) (6600) (9800) (6500) (9700) (8900) (6800) (8300) (7000) (8800) (1500) (8000))) :lonset (quote (2331 2795 3310 3349 4029 4252 4900 5235 5552 5921 6090 6663 6668 7117 7447 7817 8006 8408 9370 11701 12165 12680 12719 13399 13622 14270 14605 14922 15291 15460 16033 16038 16487 16817 17187 17376 17778 18740 21071 21535 22050 22088 22769 22991 23639 23974 24291 24661 24830 25402 25408 25857 26187 26557 26746 27148 28110 30441 30905 31419 31458 32139 32361 33009 33344 33661 34031 34200 34772 34778 35227 35557 35926 36115 36518 37479 39811 40275 40789 40828 41509 41731 42379 42714 43031 43401 43570 44142 44147 44597 44927 45296 45485 45887 46849 49180 49645 50159 50198 50878 51101 51749 52084 52401 52771 52940 53512 53517 53967 54296 54666 54855 55257 56219 58550 59014 59529 59568 60248 60471 61119 61454 61771 62141 62310 62882 63929)) :ldur (quote ((989) (1383) (300) (1742) (701) (812) (610) (465) (797) (504) (353) (19) (694) (2) (1543) (582) (381) (1047) (989) (1383) (300) (1742) (701) (812) (610) (465) (797) (504) (353) (19) (694) (2) (1543) (582) (381) (1047) (989) (1383) (300) (1742) (701) (812) (610) (465) (797) (504) (353) (19) (694) (2) (1543) (582) (381) (1047) (989) (1383) (300) (1742) (701) (812) (610) (465) (797) (504) (353) (19) (694) (2) (1543) (582) (381) (1047) (989) (1383) (300) (1742) (701) (812) (610) (465) (797) (504) (353) (19) (694) (2) (1543) (582) (381) (1047) (989) (1383) (300) (1742) (701) (812) (610) (465) (797) (504) (353) (19) (694) (2) (1543) (582) (381) (1047) (989) (1383) (300) (1742) (701) (812) (610) (465) (797) (504) (353) (19) (694) (2) (1543) (582) (381) (1047))) :lvel (quote ((87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101) (87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101) (87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101) (87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101) (87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101) (87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101) (87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 438 161) (om-make-point 1212 806) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Onset" (om-load-patch-abs1 "Onset" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 324) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 80 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 368 353) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 535 222) (om-make-point 45 30) 1.25 "1.25" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 426 224) (om-make-point 45 30) 0.75 "0.75" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 432 289) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (1 0 2 0 nil 0) (5 0 2 1 nil 0) (4 0 5 0 nil 0) (3 0 5 1 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 811 538)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 6053/4 355) nil (list (list 2361.7464 2831.9678 3353.2542 3392.6167 4081.9912 4307.5273 4963.923 5303.2905 5624.573 5999.0483 6170.328 6750.1265 6755.4453 7210.773 7544.822 7919.297 8110.79 8518.244 9492.73)) nil "Onset"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Dur" (om-load-patch-abs1 "Dur" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 324) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 80 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 300 401) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 440 233) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 747 226) (om-make-point 41 30) 600 "600" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 646 220) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ADD-OR-SUBTRACT" (quote add-or-subtract) (quote ((om-load-inputfun (quote input-funbox) "A" "A" nil) (om-load-inputfun (quote input-funbox) "B" "B" nil))) (om-make-point 476 313) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 655 269) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 344 326) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (8 0 2 0 nil 0) (1 0 3 0 nil 0) (7 0 6 1 nil 0) (5 0 7 0 nil 0) (4 0 7 1 nil 0) (6 0 8 0 nil 0) (3 0 8 1 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 10902/7 364) nil (list (list 405 1180 70 1472 983 1551 281 831 919 575 398 159 1116 717 1160 54 937 436)) nil "Dur"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 396 714) (om-make-point 83 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 138 30) (quote "get original versions") "" (om-make-point 1149 284) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ 2" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 1025 379) (om-make-point 212 141) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (7200) (6700) (5700) (7000) (5000) (8500) (8800) (4200) (3100) (3100) (3100) (3100) (3100) (3100) (3100) (3100))) :lonset (quote (3946 4584 5236 5458 5970 6095 6326 7032 7051 7680 8309 8938 9567 10196 10825 11454 12083 14533)) :ldur (quote ((2490) (2540) (870) (1990) (490) (900) (2750) (80) (2450) (2450) (2450) (2450) (2450) (2450) (2450) (2450) (2450))) :lvel (quote ((101) (102) (63) (88) (105) (82) (127) (67) (94) (105) (76) (117) (117) (90) (88) (102) (105))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7600) (6400) (5700) (4700) (5200) (5800))) :lonset (quote (3545 3906 4443 4951 5567 6438 9448)) :ldur (quote ((1250) (1860) (1750) (2130) (3010) (3010))) :lvel (quote ((127) (108) (93) (64) (80) (98))) :loffset (quote ((0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400) (11800) (6200) (11400) (11000) (6300) (10500) (6600) (10000) (6700) (9400) (9100) (6800) (8700) (7200) (8600) (1400) (8300))) :lonset (quote (1926 2309 2734 2766 3328 3512 4047 4324 4586 4891 5031 5504 5508 5879 6152 6457 6613 6945 7795)) :ldur (quote ((980) (1090) (80) (1440) (470) (1370) (710) (670) (780) (360) (1210) (10) (950) (700) (780) (400) (850) (850))) :lvel (quote ((87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0)) ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (list (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1238 581) (om-make-point 400 25) 0 1 (quote :normal) (quote t) nil 0 1)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 1082 273) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Dur" (om-load-patch-abs1 "Dur" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 324) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 80 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 300 401) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 440 233) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 747 226) (om-make-point 41 30) 600 "600" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 646 220) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ADD-OR-SUBTRACT" (quote add-or-subtract) (quote ((om-load-inputfun (quote input-funbox) "A" "A" nil) (om-load-inputfun (quote input-funbox) "B" "B" nil))) (om-make-point 476 313) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 655 269) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 344 326) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (8 0 2 0 nil 0) (1 0 3 0 nil 0) (7 0 6 1 nil 0) (5 0 7 0 nil 0) (4 0 7 1 nil 0) (6 0 8 0 nil 0) (3 0 8 1 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1886/7 312) nil (list (list 2147 2622 547 1603 34 583 3049 431 1854 2724 2166 2985 2757 2344 2996 2737 2295)) nil "Dur"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Onset" (om-load-patch-abs1 "Onset" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 324) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 80 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 368 353) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 535 222) (om-make-point 45 30) 1.25 "1.25" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 426 224) (om-make-point 45 30) 0.75 "0.75" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 432 289) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (1 0 2 0 nil 0) (5 0 2 1 nil 0) (4 0 5 0 nil 0) (3 0 5 1 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 909/4 305) nil (list (list 4691.813 5450.398 6225.629 6489.588 7098.3584 7246.984 7521.644 8361.082 8383.673 9131.557 9879.44 10627.325 11375.209 12123.093 12870.977 13618.86 14366.745 17279.807)) nil "Onset"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Dur" (om-load-patch-abs1 "Dur" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 324) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 80 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 300 401) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 440 233) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 747 226) (om-make-point 41 30) 600 "600" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 646 220) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ADD-OR-SUBTRACT" (quote add-or-subtract) (quote ((om-load-inputfun (quote input-funbox) "A" "A" nil) (om-load-inputfun (quote input-funbox) "B" "B" nil))) (om-make-point 476 313) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 655 269) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 344 326) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (8 0 2 0 nil 0) (1 0 3 0 nil 0) (7 0 6 1 nil 0) (5 0 7 0 nil 0) (4 0 7 1 nil 0) (6 0 8 0 nil 0) (3 0 8 1 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 3608/7 329) nil (list (list 709 1298 1167 2503 3080 2464)) nil "Dur"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Onset" (om-load-patch-abs1 "Onset" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 324) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 80 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 368 353) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 535 222) (om-make-point 45 30) 1.25 "1.25" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 426 224) (om-make-point 45 30) 0.75 "0.75" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 432 289) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (1 0 2 0 nil 0) (5 0 2 1 nil 0) (4 0 5 0 nil 0) (3 0 5 1 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1893/4 334) nil (list (list 3787.6392 4173.348 4747.103 5289.8735 5948.0357 6878.652 10094.673)) nil "Onset"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Dur" (om-load-patch-abs1 "Dur" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 324) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 80 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 300 401) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 440 233) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 747 226) (om-make-point 41 30) 600 "600" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 646 220) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ADD-OR-SUBTRACT" (quote add-or-subtract) (quote ((om-load-inputfun (quote input-funbox) "A" "A" nil) (om-load-inputfun (quote input-funbox) "B" "B" nil))) (om-make-point 476 313) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 655 269) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 344 326) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (8 0 2 0 nil 0) (1 0 3 0 nil 0) (7 0 6 1 nil 0) (5 0 7 0 nil 0) (4 0 7 1 nil 0) (6 0 8 0 nil 0) (3 0 8 1 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 872 526)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 5316/7 340) nil (list (list 656 1500 507 1431 1012 1118 1093 646 1025 693 1230 284 457 1284 1148 192 732 1300)) nil "Dur"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Onset" (om-load-patch-abs1 "Onset" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 324) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 80 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 368 353) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 535 222) (om-make-point 45 30) 1.25 "1.25" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 426 224) (om-make-point 45 30) 0.75 "0.75" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 432 289) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (1 0 2 0 nil 0) (5 0 2 1 nil 0) (4 0 5 0 nil 0) (3 0 5 1 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 660 478)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 2849/4 333) nil (list (list 2191.3784 2627.151 3110.7107 3147.1199 3786.5562 3995.9092 4604.6255 4919.7925 5217.8926 5564.918 5724.208 6262.3814 6266.9326 6689.052 6999.668 7346.693 7524.1875 7901.933 8869.053)) nil "Onset"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAVE-AS-MIDI" (quote save-as-midi) (quote ((om-load-inputfun (quote input-funbox) "" "OBJECT" nil))) (om-make-point 867 782) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MULTI-SEQ" (quote multi-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of CHORD-SEQ objects" "chord-seqs" (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 634 749) (om-make-point 100 70) (if (find-class (quote multi-seq) nil) (let ((newobj (make-instance (quote multi-seq) :chord-seqs (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (7200) (6700) (5400) (7100) (5000) (8800) (8500) (4000) (3000) (2800) (2800) (3100) (3000) (3100) (2800) (2800) (6900) (7200) (6700) (5400) (7100) (5000) (8800) (8500) (4000) (3000) (2800) (2800) (3100) (3000) (3100) (2800) (2800) (6900) (7200) (6700) (5400) (7100) (5000) (8800) (8500) (4000) (3000) (2800) (2800) (3100) (3000) (3100) (2800) (2800) (6900) (7200) (6700) (5400) (7100) (5000) (8800) (8500) (4000) (3000) (2800) (2800) (3100) (3000) (3100) (2800) (2800) (6900) (7200) (6700) (5400) (7100) (5000) (8800) (8500) (4000) (3000) (2800) (2800) (3100) (3000) (3100) (2800) (2800) (6900) (7200) (6700) (5400) (7100) (5000) (8800) (8500) (4000) (3000) (2800) (2800) (3100) (3000) (3100) (2800) (2800) (6900) (7200) (6700) (5400) (7100) (5000) (8800) (8500) (4000) (3000) (2800) (2800) (3100) (3000) (3100) (2800) (2800) (6900) (7200) (6700) (5400) (7100) (5000) (8800) (8500) (4000) (3000) (2800) (2800) (3100) (3000) (3100) (2800) (2800))) :lonset (quote (4030 4682 5348 5574 6097 6225 6461 7182 7201 7844 8486 9128 9771 10413 11056 11698 12340 14843 18873 19524 20190 20417 20940 21067 21303 22024 22044 22686 23329 23971 24613 25256 25898 26541 27183 29685 33715 34367 35033 35260 35782 35910 36146 36867 36886 37529 38171 38814 39456 40098 40741 41383 42026 44528 48558 49210 49875 50102 50625 50753 50989 51710 51729 52371 53014 53656 54299 54941 55583 56226 56868 59370 63401 64052 64718 64945 65468 65595 65831 66552 66572 67214 67856 68499 69141 69784 70426 71068 71711 74213 78243 78895 79561 79787 80310 80438 80674 81395 81414 82057 82699 83342 83984 84626 85269 85911 86554 89056 93086 93737 94403 94630 95153 95281 95516 96238 96257 96899 97542 98184 98827 99469 100111 100754 101396 103898 107928 108580 109246 109473 109996 110123 110359 111080 111100 111742 113881)) :ldur (quote ((2391) (2343) (634) (2044) (1006) (1444) (2566) (14) (2038) (2197) (2043) (2474) (2033) (2390) (1942) (2781) (2103) (2391) (2343) (634) (2044) (1006) (1444) (2566) (14) (2038) (2197) (2043) (2474) (2033) (2390) (1942) (2781) (2103) (2391) (2343) (634) (2044) (1006) (1444) (2566) (14) (2038) (2197) (2043) (2474) (2033) (2390) (1942) (2781) (2103) (2391) (2343) (634) (2044) (1006) (1444) (2566) (14) (2038) (2197) (2043) (2474) (2033) (2390) (1942) (2781) (2103) (2391) (2343) (634) (2044) (1006) (1444) (2566) (14) (2038) (2197) (2043) (2474) (2033) (2390) (1942) (2781) (2103) (2391) (2343) (634) (2044) (1006) (1444) (2566) (14) (2038) (2197) (2043) (2474) (2033) (2390) (1942) (2781) (2103) (2391) (2343) (634) (2044) (1006) (1444) (2566) (14) (2038) (2197) (2043) (2474) (2033) (2390) (1942) (2781) (2103) (2391) (2343) (634) (2044) (1006) (1444) (2566) (14) (2038) (2197) (2043) (2474) (2033) (2390) (1942) (2781) (2103))) :lvel (quote ((101) (102) (63) (88) (105) (82) (127) (67) (94) (105) (76) (117) (117) (90) (88) (102) (105) (101) (102) (63) (88) (105) (82) (127) (67) (94) (105) (76) (117) (117) (90) (88) (102) (105) (101) (102) (63) (88) (105) (82) (127) (67) (94) (105) (76) (117) (117) (90) (88) (102) (105) (101) (102) (63) (88) (105) (82) (127) (67) (94) (105) (76) (117) (117) (90) (88) (102) (105) (101) (102) (63) (88) (105) (82) (127) (67) (94) (105) (76) (117) (117) (90) (88) (102) (105) (101) (102) (63) (88) (105) (82) (127) (67) (94) (105) (76) (117) (117) (90) (88) (102) (105) (101) (102) (63) (88) (105) (82) (127) (67) (94) (105) (76) (117) (117) (90) (88) (102) (105) (101) (102) (63) (88) (105) (82) (127) (67) (94) (105) (76) (117) (117) (90) (88) (102) (105))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500) (6600) (5800) (4700) (5300) (5700) (7500) (6600) (5800) (4700) (5300) (5700) (7500) (6600) (5800) (4700) (5300) (5700) (7500) (6600) (5800) (4700) (5300) (5700) (7500) (6600) (5800) (4700) (5300) (5700) (7500) (6600) (5800) (4700) (5300) (5700) (7500) (6600) (5800) (4700) (5300) (5700) (7500) (6600) (5800) (4700) (5300) (5700))) :lonset (quote (3050 3361 3823 4260 4790 5540 8130 11180 11491 11953 12390 12920 13670 16260 19310 19621 20083 20520 21050 21800 24390 27440 27751 28213 28650 29180 29930 32520 35570 35881 36343 36780 37310 38059 40650 43700 44011 44473 44910 45440 46189 48779 51830 52141 52603 53040 53570 54319 56750)) :ldur (quote ((1676) (2001) (1366) (2441) (2898) (2431) (1676) (2001) (1366) (2441) (2898) (2431) (1676) (2001) (1366) (2441) (2898) (2431) (1676) (2001) (1366) (2441) (2898) (2431) (1676) (2001) (1366) (2441) (2898) (2431) (1676) (2001) (1366) (2441) (2898) (2431) (1676) (2001) (1366) (2441) (2898) (2431) (1676) (2001) (1366) (2441) (2898) (2431))) :lvel (quote ((127) (108) (93) (64) (80) (98) (127) (108) (93) (64) (80) (98) (127) (108) (93) (64) (80) (98) (127) (108) (93) (64) (80) (98) (127) (108) (93) (64) (80) (98) (127) (108) (93) (64) (80) (98) (127) (108) (93) (64) (80) (98) (127) (108) (93) (64) (80) (98))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300) (11600) (6100) (11100) (11300) (6300) (10600) (6900) (9900) (6700) (9200) (9300) (6500) (8500) (7000) (8600) (1400) (8100) (6300) (11600) (6100) (11100) (11300) (6300) (10600) (6900) (9900) (6700) (9200) (9300) (6500) (8500) (7000) (8600) (1400) (8100) (6300) (11600) (6100) (11100) (11300) (6300) (10600) (6900) (9900) (6700) (9200) (9300) (6500) (8500) (7000) (8600) (1400) (8100) (6300) (11600) (6100) (11100) (11300) (6300) (10600) (6900) (9900) (6700) (9200) (9300) (6500) (8500) (7000) (8600) (1400) (8100) (6300) (11600) (6100) (11100) (11300) (6300) (10600) (6900) (9900) (6700) (9200) (9300) (6500) (8500) (7000) (8600) (1400) (8100) (6300) (11600) (6100) (11100) (11300) (6300) (10600) (6900) (9900) (6700) (9200) (9300) (6500) (8500) (7000) (8600) (1400) (8100) (6300) (11600) (6100) (11100) (11300) (6300) (10600) (6900) (9900) (6700) (9200) (9300) (6500) (8500) (7000) (8600) (1400) (8100) (6300) (11600) (6100) (11100) (11300) (6300) (10600) (6900) (9900) (6700) (9200) (9300) (6500) (8500) (7000) (8600) (1400) (8100))) :lonset (quote (1938 2324 2751 2784 3349 3534 4073 4352 4615 4922 5063 5539 5543 5917 6191 6498 6655 6989 7845 9783 10169 10596 10629 11194 11379 11918 12196 12460 12767 12908 13384 13388 13761 14036 14343 14500 14834 15690 17628 18013 18441 18473 19039 19224 19763 20041 20305 20612 20753 21229 21233 21606 21881 22188 22345 22679 23534 25473 25858 26286 26318 26884 27069 27607 27886 28150 28457 28598 29074 29078 29451 29726 30033 30190 30524 31379 33318 33703 34131 34163 34729 34914 35452 35731 35995 36302 36442 36919 36923 37296 37571 37878 38035 38369 39224 41162 41548 41976 42008 42573 42759 43297 43576 43839 44146 44287 44763 44767 45141 45415 45722 45879 46214 47069 49007 49393 49820 49853 50418 50603 51142 51421 51684 51991 52132 52608 52612 52986 53260 53567 53724 54058 54914 56852 57238 57665 57698 58263 58448 58987 59265 59529 59836 59977 60941)) :ldur (quote ((959) (1053) (437) (1556) (407) (1869) (664) (499) (751) (33) (1260) (447) (1083) (1130) (1239) (216) (1105) (604) (959) (1053) (437) (1556) (407) (1869) (664) (499) (751) (33) (1260) (447) (1083) (1130) (1239) (216) (1105) (604) (959) (1053) (437) (1556) (407) (1869) (664) (499) (751) (33) (1260) (447) (1083) (1130) (1239) (216) (1105) (604) (959) (1053) (437) (1556) (407) (1869) (664) (499) (751) (33) (1260) (447) (1083) (1130) (1239) (216) (1105) (604) (959) (1053) (437) (1556) (407) (1869) (664) (499) (751) (33) (1260) (447) (1083) (1130) (1239) (216) (1105) (604) (959) (1053) (437) (1556) (407) (1869) (664) (499) (751) (33) (1260) (447) (1083) (1130) (1239) (216) (1105) (604) (959) (1053) (437) (1556) (407) (1869) (664) (499) (751) (33) (1260) (447) (1083) (1130) (1239) (216) (1105) (604) (959) (1053) (437) (1556) (407) (1869) (664) (499) (751) (33) (1260) (447) (1083) (1130) (1239) (216) (1105) (604))) :lvel (quote ((87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101) (87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101) (87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101) (87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101) (87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101) (87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101) (87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101) (87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (list (quote g) (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (2 2 2))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1411 853) (om-make-point 158 45) 0 1 (quote :normal) (quote t) nil 0 1)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 673 544) (om-make-point 185 116) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300) (11600) (6100) (11100) (11300) (6300) (10600) (6900) (9900) (6700) (9200) (9300) (6500) (8500) (7000) (8600) (1400) (8100) (6300) (11600) (6100) (11100) (11300) (6300) (10600) (6900) (9900) (6700) (9200) (9300) (6500) (8500) (7000) (8600) (1400) (8100) (6300) (11600) (6100) (11100) (11300) (6300) (10600) (6900) (9900) (6700) (9200) (9300) (6500) (8500) (7000) (8600) (1400) (8100) (6300) (11600) (6100) (11100) (11300) (6300) (10600) (6900) (9900) (6700) (9200) (9300) (6500) (8500) (7000) (8600) (1400) (8100) (6300) (11600) (6100) (11100) (11300) (6300) (10600) (6900) (9900) (6700) (9200) (9300) (6500) (8500) (7000) (8600) (1400) (8100) (6300) (11600) (6100) (11100) (11300) (6300) (10600) (6900) (9900) (6700) (9200) (9300) (6500) (8500) (7000) (8600) (1400) (8100) (6300) (11600) (6100) (11100) (11300) (6300) (10600) (6900) (9900) (6700) (9200) (9300) (6500) (8500) (7000) (8600) (1400) (8100) (6300) (11600) (6100) (11100) (11300) (6300) (10600) (6900) (9900) (6700) (9200) (9300) (6500) (8500) (7000) (8600) (1400) (8100))) :lonset (quote (1938 2324 2751 2784 3349 3534 4073 4352 4615 4922 5063 5539 5543 5917 6191 6498 6655 6989 7845 9783 10169 10596 10629 11194 11379 11918 12196 12460 12767 12908 13384 13388 13761 14036 14343 14500 14834 15690 17628 18013 18441 18473 19039 19224 19763 20041 20305 20612 20753 21229 21233 21606 21881 22188 22345 22679 23534 25473 25858 26286 26318 26884 27069 27607 27886 28150 28457 28598 29074 29078 29451 29726 30033 30190 30524 31379 33318 33703 34131 34163 34729 34914 35452 35731 35995 36302 36442 36919 36923 37296 37571 37878 38035 38369 39224 41162 41548 41976 42008 42573 42759 43297 43576 43839 44146 44287 44763 44767 45141 45415 45722 45879 46214 47069 49007 49393 49820 49853 50418 50603 51142 51421 51684 51991 52132 52608 52612 52986 53260 53567 53724 54058 54914 56852 57238 57665 57698 58263 58448 58987 59265 59529 59836 59977 60941)) :ldur (quote ((959) (1053) (437) (1556) (407) (1869) (664) (499) (751) (33) (1260) (447) (1083) (1130) (1239) (216) (1105) (604) (959) (1053) (437) (1556) (407) (1869) (664) (499) (751) (33) (1260) (447) (1083) (1130) (1239) (216) (1105) (604) (959) (1053) (437) (1556) (407) (1869) (664) (499) (751) (33) (1260) (447) (1083) (1130) (1239) (216) (1105) (604) (959) (1053) (437) (1556) (407) (1869) (664) (499) (751) (33) (1260) (447) (1083) (1130) (1239) (216) (1105) (604) (959) (1053) (437) (1556) (407) (1869) (664) (499) (751) (33) (1260) (447) (1083) (1130) (1239) (216) (1105) (604) (959) (1053) (437) (1556) (407) (1869) (664) (499) (751) (33) (1260) (447) (1083) (1130) (1239) (216) (1105) (604) (959) (1053) (437) (1556) (407) (1869) (664) (499) (751) (33) (1260) (447) (1083) (1130) (1239) (216) (1105) (604) (959) (1053) (437) (1556) (407) (1869) (664) (499) (751) (33) (1260) (447) (1083) (1130) (1239) (216) (1105) (604))) :lvel (quote ((87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101) (87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101) (87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101) (87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101) (87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101) (87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101) (87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101) (87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 438 657) (om-make-point 954 570) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "pitch 2" (om-load-patch-abs1 "pitch" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 413) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 131 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ADD-OR-SUBTRACT" (quote add-or-subtract) (quote ((om-load-inputfun (quote input-funbox) "A" "A" nil) (om-load-inputfun (quote input-funbox) "B" "B" nil))) (om-make-point 178 262) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 293 313) (om-make-point 32 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 386 322) (om-make-point 31 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 62 286) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 158 193) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 373 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 364 180) (om-make-point 32 34) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 437 186) (om-make-point 26 35) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (3 0 2 1 nil 0) (7 0 3 0 nil 0) (4 0 3 1 nil 0) (2 0 5 0 nil 0) (6 0 5 1 nil 0) (1 0 6 0 nil 0) (8 0 7 0 nil 0) (9 0 7 1 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 5307/8 2635/8) nil (list (list 6100 12000 6200 11400 11000 6200 10800 6600 10100 7000 9700 8800 7000 8700 7500 8300 1600 8300)) nil "pitch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 5" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 697 160) (om-make-point 139 103) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400) (11800) (6200) (11400) (11000) (6300) (10500) (6600) (10000) (6700) (9400) (9100) (6800) (8700) (7200) (8600) (1400) (8300))) :lonset (quote (1926 2309 2734 2766 3328 3512 4047 4324 4586 4891 5031 5504 5508 5879 6152 6457 6613 6945 7795)) :ldur (quote ((980) (1090) (80) (1440) (470) (1370) (710) (670) (780) (360) (1210) (10) (950) (700) (780) (400) (850) (850))) :lvel (quote ((87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 400 25) (om-make-point 624 419) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Birdmidi6" (om-load-patch-abs1 "Birdmidi6" (quote ((let ((box (om-load-boxcall (quote lispfun) "BIRD-Y-RAW-BIRDS6" (quote bird-y-raw-birds6) (quote nil) (om-make-point 610 123) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BIRD-X-RAW-BIRDS6" (quote bird-x-raw-birds6) (quote nil) (om-make-point 483 106) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BIRD-X-BIRDS6" (quote bird-x-birds6) (quote nil) (om-make-point 340 90) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BIRD-Y-BIRDS6" (quote bird-y-birds6) (quote nil) (om-make-point 148 34) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 344 623) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 169 45) (quote "change this value to$ increase/decrease speed") "" (om-make-point 229 148) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 168 389) (om-make-point 263 158) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400) (11800) (6200) (11400) (11000) (6300) (10500) (6600) (10000) (6700) (9400) (9100) (6800) (8700) (7200) (8600) (1400) (8300))) :lonset (quote (1926 2309 2734 2766 3328 3512 4047 4324 4586 4891 5031 5504 5508 5879 6152 6457 6613 6945 7795)) :ldur (quote ((980) (1090) (80) (1440) (470) (1370) (710) (670) (780) (360) (1210) (10) (950) (700) (780) (400) (850) (850))) :lvel (quote ((87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 977 539) (om-make-point 400 38) 0 1 (quote :normal) (quote t) nil 0 1)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BIRD-VEL" (quote bird-vel) (quote ((om-load-inputfun (quote input-funbox) "YS" "YS" nil))) (om-make-point 591 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 82 162) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 120 45) (quote "midi-to-midicent $(for pitches)") "" (om-make-point 50 113) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 120 220) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 312 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 266 192) (om-make-point 55 30) 10000 "10000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAVE-AS-MIDI" (quote save-as-midi) (quote ((om-load-inputfun (quote input-funbox) "" "OBJECT" nil))) (om-make-point 53 619) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 503 234) (om-make-point 42 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 340 299) (om-make-point 37 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 447 228) (om-make-point 24 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 4 0 nil 0) (10 0 6 1 nil 0) (11 0 6 2 nil 0) (15 0 6 3 nil 0) (7 0 6 4 nil 0) (0 0 7 0 nil 0) (8 0 10 0 nil 0) (3 0 10 1 nil 0) (12 0 11 0 nil 0) (2 0 11 1 nil 0) (1 0 14 0 nil 0) (16 0 15 0 nil 0) (14 0 15 1 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 830 511)) (quote nil) (om-make-point 8141/12 635/12) nil (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6400) (11800) (6200) (11400) (11000) (6300) (10500) (6600) (10000) (6700) (9400) (9100) (6800) (8700) (7200) (8600) (1400) (8300))) :lonset (quote (1926 2309 2734 2766 3328 3512 4047 4324 4586 4891 5031 5504 5508 5879 6152 6457 6613 6945 7795)) :ldur (quote ((980) (1090) (80) (1440) (470) (1370) (710) (670) (780) (360) (1210) (10) (950) (700) (780) (400) (850) (850))) :lvel (quote ((87) (115) (86) (113) (112) (87) (109) (89) (108) (90) (105) (104) (90) (102) (93) (102) (50) (101))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil "Birdmidi6"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 4" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 409 530) (om-make-point 185 116) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7500) (6600) (5800) (4700) (5300) (5700) (7500) (6600) (5800) (4700) (5300) (5700) (7500) (6600) (5800) (4700) (5300) (5700) (7500) (6600) (5800) (4700) (5300) (5700) (7500) (6600) (5800) (4700) (5300) (5700) (7500) (6600) (5800) (4700) (5300) (5700) (7500) (6600) (5800) (4700) (5300) (5700) (7500) (6600) (5800) (4700) (5300) (5700))) :lonset (quote (3050 3361 3823 4260 4790 5540 8130 11180 11491 11953 12390 12920 13670 16260 19310 19621 20083 20520 21050 21800 24390 27440 27751 28213 28650 29180 29930 32520 35570 35881 36343 36780 37310 38059 40650 43700 44011 44473 44910 45440 46189 48779 51830 52141 52603 53040 53570 54319 56750)) :ldur (quote ((1676) (2001) (1366) (2441) (2898) (2431) (1676) (2001) (1366) (2441) (2898) (2431) (1676) (2001) (1366) (2441) (2898) (2431) (1676) (2001) (1366) (2441) (2898) (2431) (1676) (2001) (1366) (2441) (2898) (2431) (1676) (2001) (1366) (2441) (2898) (2431) (1676) (2001) (1366) (2441) (2898) (2431) (1676) (2001) (1366) (2441) (2898) (2431))) :lvel (quote ((127) (108) (93) (64) (80) (98) (127) (108) (93) (64) (80) (98) (127) (108) (93) (64) (80) (98) (127) (108) (93) (64) (80) (98) (127) (108) (93) (64) (80) (98) (127) (108) (93) (64) (80) (98) (127) (108) (93) (64) (80) (98) (127) (108) (93) (64) (80) (98))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 413 593) (om-make-point 954 570) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 147 520) (om-make-point 185 116) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900) (7200) (6700) (5400) (7100) (5000) (8800) (8500) (4000) (3000) (2800) (2800) (3100) (3000) (3100) (2800) (2800) (6900) (7200) (6700) (5400) (7100) (5000) (8800) (8500) (4000) (3000) (2800) (2800) (3100) (3000) (3100) (2800) (2800) (6900) (7200) (6700) (5400) (7100) (5000) (8800) (8500) (4000) (3000) (2800) (2800) (3100) (3000) (3100) (2800) (2800) (6900) (7200) (6700) (5400) (7100) (5000) (8800) (8500) (4000) (3000) (2800) (2800) (3100) (3000) (3100) (2800) (2800) (6900) (7200) (6700) (5400) (7100) (5000) (8800) (8500) (4000) (3000) (2800) (2800) (3100) (3000) (3100) (2800) (2800) (6900) (7200) (6700) (5400) (7100) (5000) (8800) (8500) (4000) (3000) (2800) (2800) (3100) (3000) (3100) (2800) (2800) (6900) (7200) (6700) (5400) (7100) (5000) (8800) (8500) (4000) (3000) (2800) (2800) (3100) (3000) (3100) (2800) (2800) (6900) (7200) (6700) (5400) (7100) (5000) (8800) (8500) (4000) (3000) (2800) (2800) (3100) (3000) (3100) (2800) (2800))) :lonset (quote (4030 4682 5348 5574 6097 6225 6461 7182 7201 7844 8486 9128 9771 10413 11056 11698 12340 14843 18873 19524 20190 20417 20940 21067 21303 22024 22044 22686 23329 23971 24613 25256 25898 26541 27183 29685 33715 34367 35033 35260 35782 35910 36146 36867 36886 37529 38171 38814 39456 40098 40741 41383 42026 44528 48558 49210 49875 50102 50625 50753 50989 51710 51729 52371 53014 53656 54299 54941 55583 56226 56868 59370 63401 64052 64718 64945 65468 65595 65831 66552 66572 67214 67856 68499 69141 69784 70426 71068 71711 74213 78243 78895 79561 79787 80310 80438 80674 81395 81414 82057 82699 83342 83984 84626 85269 85911 86554 89056 93086 93737 94403 94630 95153 95281 95516 96238 96257 96899 97542 98184 98827 99469 100111 100754 101396 103898 107928 108580 109246 109473 109996 110123 110359 111080 111100 111742 113881)) :ldur (quote ((2391) (2343) (634) (2044) (1006) (1444) (2566) (14) (2038) (2197) (2043) (2474) (2033) (2390) (1942) (2781) (2103) (2391) (2343) (634) (2044) (1006) (1444) (2566) (14) (2038) (2197) (2043) (2474) (2033) (2390) (1942) (2781) (2103) (2391) (2343) (634) (2044) (1006) (1444) (2566) (14) (2038) (2197) (2043) (2474) (2033) (2390) (1942) (2781) (2103) (2391) (2343) (634) (2044) (1006) (1444) (2566) (14) (2038) (2197) (2043) (2474) (2033) (2390) (1942) (2781) (2103) (2391) (2343) (634) (2044) (1006) (1444) (2566) (14) (2038) (2197) (2043) (2474) (2033) (2390) (1942) (2781) (2103) (2391) (2343) (634) (2044) (1006) (1444) (2566) (14) (2038) (2197) (2043) (2474) (2033) (2390) (1942) (2781) (2103) (2391) (2343) (634) (2044) (1006) (1444) (2566) (14) (2038) (2197) (2043) (2474) (2033) (2390) (1942) (2781) (2103) (2391) (2343) (634) (2044) (1006) (1444) (2566) (14) (2038) (2197) (2043) (2474) (2033) (2390) (1942) (2781) (2103))) :lvel (quote ((101) (102) (63) (88) (105) (82) (127) (67) (94) (105) (76) (117) (117) (90) (88) (102) (105) (101) (102) (63) (88) (105) (82) (127) (67) (94) (105) (76) (117) (117) (90) (88) (102) (105) (101) (102) (63) (88) (105) (82) (127) (67) (94) (105) (76) (117) (117) (90) (88) (102) (105) (101) (102) (63) (88) (105) (82) (127) (67) (94) (105) (76) (117) (117) (90) (88) (102) (105) (101) (102) (63) (88) (105) (82) (127) (67) (94) (105) (76) (117) (117) (90) (88) (102) (105) (101) (102) (63) (88) (105) (82) (127) (67) (94) (105) (76) (117) (117) (90) (88) (102) (105) (101) (102) (63) (88) (105) (82) (127) (67) (94) (105) (76) (117) (117) (90) (88) (102) (105) (101) (102) (63) (88) (105) (82) (127) (67) (94) (105) (76) (117) (117) (90) (88) (102) (105))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 413 593) (om-make-point 954 570) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "pitch 2" (om-load-patch-abs1 "pitch" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 413) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 131 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ADD-OR-SUBTRACT" (quote add-or-subtract) (quote ((om-load-inputfun (quote input-funbox) "A" "A" nil) (om-load-inputfun (quote input-funbox) "B" "B" nil))) (om-make-point 178 262) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 293 313) (om-make-point 32 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 386 322) (om-make-point 31 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 62 286) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 158 193) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 373 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 364 180) (om-make-point 32 34) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 437 186) (om-make-point 26 35) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (3 0 2 1 nil 0) (7 0 3 0 nil 0) (4 0 3 1 nil 0) (2 0 5 0 nil 0) (6 0 5 1 nil 0) (1 0 6 0 nil 0) (8 0 7 0 nil 0) (9 0 7 1 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 3507/8 2683/8) nil (list (list 7600 6400 5900 4700 5500 6000)) nil "pitch"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Birdmidi8" (om-load-patch-abs1 "Birdmidi8" (quote ((let ((box (om-load-boxcall (quote lispfun) "BIRD-Y-RAW-BIRDS7" (quote bird-y-raw-birds7) (quote nil) (om-make-point 597 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BIRD-X-RAW-BIRDS8" (quote bird-x-raw-birds8) (quote nil) (om-make-point 471 134) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BIRD-Y-BIRDS8" (quote bird-y-birds8) (quote nil) (om-make-point 171 79) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BIRD-X-BIRDS8" (quote bird-x-birds8) (quote nil) (om-make-point 357 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 344 623) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 169 45) (quote "change this value to$ increase/decrease speed") "" (om-make-point 225 128) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 168 389) (om-make-point 263 158) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4600) (4800) (2000) (3700) (5000) (3300) (7700) (2300) (4100) (5100) (2900) (6500) (6500) (3800) (3700) (4700) (5100))) :lonset (quote (404 2585 3125 3353 3376 3515 4201 4217 4606 4719 5114 5292 5984 6139 6606 7130 7598 7888)) :ldur (quote ((1330) (330) (140) (20) (80) (420) (10) (240) (70) (240) (110) (420) (100) (280) (320) (290) (290))) :lvel (quote ((101) (102) (63) (88) (105) (82) (127) (67) (94) (105) (76) (117) (117) (90) (88) (102) (105))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 977 539) (om-make-point 400 38) 0 1 (quote :normal) (quote t) nil 0 1)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BIRD-VEL" (quote bird-vel) (quote ((om-load-inputfun (quote input-funbox) "YS" "YS" nil))) (om-make-point 591 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 82 162) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 120 45) (quote "midi-to-midicent $(for pitches)") "" (om-make-point 50 113) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 120 220) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 312 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 261 176) (om-make-point 55 30) 10000 "10000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAVE-AS-MIDI" (quote save-as-midi) (quote ((om-load-inputfun (quote input-funbox) "" "OBJECT" nil))) (om-make-point 53 619) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 503 234) (om-make-point 42 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 340 299) (om-make-point 37 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 447 228) (om-make-point 24 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 4 0 nil 0) (10 0 6 1 nil 0) (11 0 6 2 nil 0) (15 0 6 3 nil 0) (7 0 6 4 nil 0) (0 0 7 0 nil 0) (8 0 10 0 nil 0) (2 0 10 1 nil 0) (12 0 11 0 nil 0) (3 0 11 1 nil 0) (1 0 14 0 nil 0) (16 0 15 0 nil 0) (14 0 15 1 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 2813/12 527/12) (om-make-point 61 67) (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (7200) (6700) (5700) (7000) (5000) (8500) (8800) (4200) (3100) (3100) (3100) (3100) (3100) (3100) (3100) (3100))) :lonset (quote (3946 4584 5236 5458 5970 6095 6326 7032 7051 7680 8309 8938 9567 10196 10825 11454 12083 14533)) :ldur (quote ((2490) (2540) (870) (1990) (490) (900) (2750) (80) (2450) (2450) (2450) (2450) (2450) (2450) (2450) (2450) (2450))) :lvel (quote ((101) (102) (63) (88) (105) (82) (127) (67) (94) (105) (76) (117) (117) (90) (88) (102) (105))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil "Birdmidi8"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "Birdmidi3" (om-load-patch-abs1 "Birdmidi3" (quote ((let ((box (om-load-boxcall (quote lispfun) "BIRD-Y-RAW-BIRDS3" (quote bird-y-raw-birds3) (quote nil) (om-make-point 585 205) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BIRD-X-RAW-BIRDS3" (quote bird-x-raw-birds3) (quote nil) (om-make-point 468 125) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BIRD-X-BIRDS3" (quote bird-x-birds3) (quote nil) (om-make-point 335 94) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BIRD-Y-BIRDS3" (quote bird-y-birds3) (quote nil) (om-make-point 133 76) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 344 623) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 169 45) (quote "change this value to$ increase/decrease speed") "" (om-make-point 229 148) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 168 389) (om-make-point 263 158) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((4600) (4800) (2000) (3700) (5000) (3300) (7700) (2300) (4100) (5100) (2900) (6500) (6500) (3800) (3700) (4700) (5100))) :lonset (quote (404 2585 3125 3353 3376 3515 4201 4217 4606 4719 5114 5292 5984 6139 6606 7130 7598 7888)) :ldur (quote ((1330) (330) (140) (20) (80) (420) (10) (240) (70) (240) (110) (420) (100) (280) (320) (290) (290))) :lvel (quote ((101) (102) (63) (88) (105) (82) (127) (67) (94) (105) (76) (117) (117) (90) (88) (102) (105))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 977 539) (om-make-point 400 38) 0 1 (quote :normal) (quote t) nil 0 1)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BIRD-VEL" (quote bird-vel) (quote ((om-load-inputfun (quote input-funbox) "YS" "YS" nil))) (om-make-point 591 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 82 162) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 120 45) (quote "midi-to-midicent $(for pitches)") "" (om-make-point 50 113) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 120 220) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 312 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 283 192) (om-make-point 55 30) 10000 "10000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAVE-AS-MIDI" (quote save-as-midi) (quote ((om-load-inputfun (quote input-funbox) "" "OBJECT" nil))) (om-make-point 53 619) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 503 234) (om-make-point 42 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 340 299) (om-make-point 37 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 5" (quote list) (quote nil) (om-make-point 447 228) (om-make-point 24 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 4 0 nil 0) (10 0 6 1 nil 0) (11 0 6 2 nil 0) (15 0 6 3 nil 0) (7 0 6 4 nil 0) (0 0 7 0 nil 0) (8 0 10 0 nil 0) (3 0 10 1 nil 0) (12 0 11 0 nil 0) (2 0 11 1 nil 0) (1 0 14 0 nil 0) (16 0 15 0 nil 0) (14 0 15 1 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 5669/12 599/12) (om-make-point 61 67) (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7600) (6400) (5700) (4700) (5200) (5800))) :lonset (quote (3545 3906 4443 4951 5567 6438 9448)) :ldur (quote ((1250) (1860) (1750) (2130) (3010) (3010))) :lvel (quote ((127) (108) (93) (64) (80) (98))) :loffset (quote ((0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil "Birdmidi3"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 189 156) (om-make-point 185 116) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6800) (7200) (6700) (5700) (7000) (5000) (8500) (8800) (4200) (3100) (3100) (3100) (3100) (3100) (3100) (3100) (3100))) :lonset (quote (3946 4584 5236 5458 5970 6095 6326 7032 7051 7680 8309 8938 9567 10196 10825 11454 12083 14533)) :ldur (quote ((2490) (2540) (870) (1990) (490) (900) (2750) (80) (2450) (2450) (2450) (2450) (2450) (2450) (2450) (2450) (2450))) :lvel (quote ((101) (102) (63) (88) (105) (82) (127) (67) (94) (105) (76) (117) (117) (90) (88) (102) (105))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 400 25) (om-make-point 954 570) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 411 167) (om-make-point 185 116) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7600) (6400) (5700) (4700) (5200) (5800))) :lonset (quote (3545 3906 4443 4951 5567 6438 9448)) :ldur (quote ((1250) (1860) (1750) (2130) (3010) (3010))) :lvel (quote ((127) (108) (93) (64) (80) (98))) :loffset (quote ((0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (measure onset scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list 1 0 nil (quote t) (quote :normal) 1 0 (om-make-point 400 25) (om-make-point 954 570) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "pitch" (om-load-patch-abs1 "pitch" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 50 413) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 131 50) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ADD-OR-SUBTRACT" (quote add-or-subtract) (quote ((om-load-inputfun (quote input-funbox) "A" "A" nil) (om-load-inputfun (quote input-funbox) "B" "B" nil))) (om-make-point 178 262) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 293 313) (om-make-point 32 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 4" (quote list) (quote nil) (om-make-point 386 322) (om-make-point 31 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 62 286) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FLAT" (quote flat) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 158 193) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 373 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 364 180) (om-make-point 32 34) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 437 186) (om-make-point 26 35) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 0 0 nil 0) (3 0 2 1 nil 0) (7 0 3 0 nil 0) (4 0 3 1 nil 0) (2 0 5 0 nil 0) (6 0 5 1 nil 0) (1 0 6 0 nil 0) (8 0 7 0 nil 0) (9 0 7 1 nil 0))) 7.06 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1515/8 2427/8) nil (list (list 6800 7500 6800 6000 7200 5300 8700 8800 4400 2900 3100 2900 3100 2800 2900 3100 3300)) nil "pitch"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 0 0 nil 0) (23 0 1 0 nil 0) (19 0 1 1 nil 0) (18 0 1 2 nil 0) (24 4 1 3 nil 0) (28 0 2 0 nil 0) (17 0 2 1 nil 0) (16 0 2 2 nil 0) (32 4 2 3 nil 0) (33 0 3 0 nil 0) (15 0 3 1 nil 0) (14 0 3 2 nil 0) (31 4 3 3 nil 0) (6 0 4 0 nil 0) (8 0 4 1 nil 0) (9 0 4 2 nil 0) (5 4 4 3 nil 0) (5 1 6 0 nil 0) (4 0 7 1 nil 0) (4 1 7 2 nil 0) (4 2 7 3 nil 0) (4 3 7 4 nil 0) (5 2 8 0 nil 0) (5 3 9 0 nil 0) (27 0 10 0 nil 0) (26 0 10 1 nil 0) (22 0 10 2 nil 0) (13 0 12 1 nil 0) (31 0 13 0 nil 0) (32 0 13 1 nil 0) (24 0 13 2 nil 0) (31 3 14 0 nil 0) (31 2 15 0 nil 0) (32 3 16 0 nil 0) (32 2 17 0 nil 0) (24 3 18 0 nil 0) (24 2 19 0 nil 0) (21 0 20 0 nil 0) (10 0 21 1 nil 0) (1 0 22 1 nil 0) (1 1 22 2 nil 0) (1 2 22 3 nil 0) (1 3 22 4 nil 0) (24 1 23 0 nil 0) (25 0 24 0 nil 0) (2 0 26 1 nil 0) (2 1 26 2 nil 0) (2 2 26 3 nil 0) (2 3 26 4 nil 0) (3 0 27 1 nil 0) (3 1 27 2 nil 0) (3 2 27 3 nil 0) (3 3 27 4 nil 0) (32 1 28 0 nil 0) (29 0 31 0 nil 0) (30 0 32 0 nil 0) (31 1 33 0 nil 0))) nil 7.06))
; OM File Header - Saved 2025/09/12 23:09:46
; (7.06 :patc (om-make-point 25 164) (om-make-point 50 50) (om-make-point 1184 667) "" 183 0 "2025/09/12 03:04:50" "2025/09/12 03:21:40")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "birdsongVIDEO" (quote ((let ((box (om-load-boxcall (quote lispfun) "BIRD-Y" (quote bird-y) (quote nil) (om-make-point 195 83) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BIRD-X" (quote bird-x) (quote nil) (om-make-point 331 101) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BIRD-Y-RAW" (quote bird-y-raw) (quote nil) (om-make-point 597 192) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BIRD-X-RAW" (quote bird-x-raw) (quote nil) (om-make-point 461 104) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 3" (quote list) (quote nil) (om-make-point 453 242) (om-make-point 24 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 3" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 346 313) (om-make-point 37 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 509 248) (om-make-point 42 59) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SAVE-AS-MIDI" (quote save-as-midi) (quote ((om-load-inputfun (quote input-funbox) "" "OBJECT" nil))) (om-make-point 379 610) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list 2" (quote list) (quote nil) (om-make-point 289 206) (om-make-point 62 30) 100000 "100000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM* 2" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 318 243) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 3" (om-make-point 330 60) (quote "GET YOUR DATA:$call different types of analyzed birds by typing:$bird-(x, y, x-raw, or y-raw)-(name of the imagefile)") "" (om-make-point 660 82) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 126 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment 2" (om-make-point 120 45) (quote "midi-to-midicent $(for pitches)") "" (om-make-point 56 127) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 88 176) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "BIRD-VEL" (quote bird-vel) (quote ((om-load-inputfun (quote input-funbox) "YS" "YS" nil))) (om-make-point 597 342) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 172 403) (om-make-point 263 158) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300) (8500) (7100) (7600) (8100) (9100) (7900) (3400) (12000) (7300) (1000) (5800) (7600) (5600) (6400) (8200) (8500) (7300) (7400) (3400) (8500) (200) (7800) (6600) (6900) (5600) (7700) (5000) (8800) (3500) (6600) (6900) (8900) (7400) (8400) (6900) (4800) (6200) (4500) (3800) (9400) (5900) (6500) (9200) (8200) (9200) (6200) (4000) (4100) (5700) (4100) (9900) (5500) (6200) (9200) (9000) (10200) (5400) (3100) (4500) (5400) (3900) (10400) (5400) (6200) (9900) (8900) (11300) (4300) (5100) (2300) (5200) (3800) (10800) (10600) (5600) (6300) (8400) (12500) (200) (3200) (5800) (1800) (5100) (3900) (11300) (11100) (6100) (6500) (7700) (2300) (300) (6500) (1300) (11900) (5200) (4200) (11300) (7000) (6700) (6900) (1700) (900) (12500) (7200) (1100) (5500) (4700) (6400) (11200) (7400) (7300) (1600) (1300) (7800) (1100) (5900) (5400) (5800) (10700) (8000) (2300) (1100) (8100) (5400) (1200) (6200) (6300) (10000) (8600) (3200) (500) (0) (3200) (1200) (5200) (8200) (1400) (6800) (12400) (3800) (6900) (9100) (9100) (1000) (200) (5000) (4000) (1500) (8200) (4200) (7400) (1800) (11400) (8200) (9500) (7600) (12300) (200) (1700) (5000) (4600) (1800) (8000) (7800) (9800) (10600) (7400) (2100) (11400) (100) (2500) (900) (5000) (4700) (100) (10200) (8300) (4900) (6600) (7800) (2100) (10000) (2300) (10500) (3100) (5100) (1700) (4900) (1000) (10800) (8700) (5900) (9500) (4900) (7400) (2500) (9700) (5300) (3700) (2400) (5100) (1900) (11500) (9300) (5300) (9100) (4400) (11800) (9900) (6900) (8900) (5700) (5100) (2600) (4000) (3100) (12300) (9900) (4700) (8700) (12300) (10200) (3500) (6300) (8100) (6200) (4900) (3100) (3700) (4100) (10600) (4300) (8200) (12600) (10400) (3300) (4500) (6800) (7400) (11100) (4100) (4100) (3800) (7700) (10600) (4900) (1300) (3200) (3900) (7400) (6800) (11600) (4100) (10800) (7100) (3200) (4200) (11700) (4200) (400) (2700) (3100) (8000) (11800) (6200) (4400) (10900) (6700) (2200) (4100) (3500) (10300) (5500) (1900) (2100) (11700) (4900) (8600) (5800) (10900) (6500) (1100) (2900) (3700) (6000) (9200) (5900) (900) (1200) (11300) (5500) (11000) (6500) (9100) (5400) (200) (2400) (6500) (6300) (8300) (3000) (300) (10700) (6200) (11000) (6800) (9400) (5300) (2100) (7000) (6800) (7500) (2200) (10000) (10800) (7000) (7300) (9600) (2100) (5200) (7300) (7200) (6900) (1400) (9300) (10300) (7700) (7900) (2300) (7400) (7500) (9600) (5300) (6500) (700) (8600) (12100) (9500) (8700) (8300) (2400) (7500) (7800) (9300) (6300) (5600) (0) (12400) (11300) (8000) (8600) (9400) (8800) (7500) (7900) (2700) (5900) (8800) (5900) (11500) (10400) (7500) (7600) (7900) (7400) (10200) (3100) (9100) (5500) (8200) (6200) (9400) (10800) (7500) (7200) (6700) (7100) (100) (3500) (10900) (9400) (5100) (7600) (6500) (8600) (7000) (10300) (6500) (6900) (5900) (700) (4100) (11300) (9800) (4600) (7200) (6900) (6300) (5600) (7800) (9900) (6800) (5500) (1400) (4600) (11500) (4000) (10100) (200) (6800) (5400) (4700) (7000) (9500) (2300) (6800) (5100) (5400) (3500) (11500) (10300) (600) (6300) (4500) (4000) (6400) (9200) (3200) (5700) (6800) (3200) (5500) (11400) (700) (10400) (5700) (100) (8500) (3600) (3400) (5800) (200) (8900) (3100) (4100) (6200) (7000) (5800) (600) (11100) (10100) (5000) (9100) (500) (2900) (3000) (5400) (3100) (800) (8900) (300) (4900) (6800) (7500) (6100) (10700) (9800) (4300) (9600) (1100))) :lonset (quote (0 680 12670 15190 18900 30990 37530 46050 49180 93120 97750 100000 0 2520 6550 16470 17630 21940 24460 36470 43380 98130 98200 100000 0 1290 4080 5300 19060 25340 26100 30330 50150 95840 100000 0 5290 9990 15660 21250 29310 37510 42210 61450 90680 100000 0 12410 20250 22720 27500 41780 51350 55680 73470 86470 100000 0 19470 20410 34460 39090 54400 65700 69540 81630 84690 100000 0 16580 21360 37650 41490 55830 61770 67130 69950 78640 82330 100000 0 19510 31320 55020 59120 60780 79120 94340 97950 100000 0 9990 17180 32070 35960 57640 60040 80820 89310 95700 100000 0 1440 8240 14520 31620 58500 58600 72910 79710 93100 100000 0 4700 17510 37960 62040 64630 68630 87540 100000 0 8990 19580 42200 43390 66010 76590 89290 99340 100000 0 26180 33950 42940 43150 48630 68460 78530 84230 90910 93870 95400 100000 0 13270 35690 51620 60370 62930 77880 79550 80430 86820 92430 92530 100000 0 17980 18400 43190 77560 85210 85290 89240 94290 97310 98150 100000 0 8850 21530 23750 35030 62680 74710 80380 80830 81780 86950 87170 89380 89750 100000 0 27750 29230 31140 52690 62440 74610 78450 83170 89590 91730 95650 100000 0 20890 34520 37110 39040 46150 66520 71480 75630 85330 97780 99110 99260 100000 0 11990 23070 27790 41650 42250 57380 61350 64870 78500 87720 89290 99850 100000 0 5420 7430 10240 61850 63350 63960 67770 91870 97090 100000 0 1190 11110 12670 44960 46810 61330 62960 68440 69700 99700 100000 0 5630 25240 29580 44230 46000 65670 67980 76260 76320 95450 99730 100000 0 10830 36300 40170 41380 42710 58500 62370 80220 83970 93160 95100 100000 0 17440 37950 42430 47790 53090 54740 59280 84800 91570 93990 97640 98110 100000 0 23740 34340 41170 49040 53790 56800 62070 84710 87550 92530 94560 97630 100000 0 0 13520 17080 24820 46640 53910 70040 76440 79290 89170 100000 0 13370 17100 22110 57430 61760 64380 67140 70350 84540 100000 0 10480 21120 21710 55390 59110 62230 68250 74940 82300 100000 0 390 7640 22930 25980 49770 50470 52730 79880 81670 86510 100000 0 5910 11830 15920 34720 39950 46700 47310 50870 84610 93330 100000 0 1910 12930 14920 30570 31590 36880 41590 42910 76050 92580 100000 0 1810 16170 16460 16680 18120 32420 35670 41010 47220 69030 91840 100000 0 4810 5530 7330 21120 21340 30100 32690 46480 52950 62790 91670 100000 0 3580 4500 13870 31400 32850 35210 37200 59070 62880 66010 98090 100000 0 5340 10680 22850 39990 40580 41770 43690 56900 67880 74930 87980 100000 0 6250 13910 28040 42160 44000 45990 46360 50260 72770 73580 80130 96320 98970 100000 0 8590 16390 31300 32710 35050 45120 47380 51210 56910 59170 78690 86810 94380 95000 100000 0 11130 18260 22260 23220 36870 41300 48350 51130 55390 63390 84780 88430 90960 93390 100000 100760)) :ldur (quote ((100) (1760) (370) (540) (1780) (960) (1250) (460) (6450) (680) (330) (-14180) (350) (560) (1380) (160) (600) (350) (1670) (960) (7610) (10) (250) (-13280) (170) (370) (160) (1820) (830) (100) (560) (2620) (6040) (550) (-13550) (710) (630) (760) (750) (1080) (1100) (630) (2580) (3920) (1250) (-13820) (1660) (1050) (330) (640) (1910) (1280) (580) (2380) (1740) (1810) (-13370) (2480) (120) (1790) (590) (1950) (1440) (490) (1540) (390) (1950) (-12130) (2290) (660) (2250) (530) (1980) (820) (740) (390) (1200) (510) (2440) (-12830) (2000) (1210) (2430) (420) (170) (1880) (1560) (370) (210) (-8950) (1000) (720) (1490) (390) (2170) (240) (2080) (850) (640) (430) (-8530) (140) (660) (610) (1660) (2610) (10) (1390) (660) (1300) (670) (-8540) (400) (1090) (1740) (2050) (220) (340) (1610) (1060) (-7230) (680) (800) (1710) (90) (1710) (800) (960) (760) (50) (-9270) (2390) (710) (820) (20) (500) (1810) (920) (520) (610) (270) (140) (420) (-9890) (1350) (2280) (1620) (890) (260) (1520) (170) (90) (650) (570) (10) (760) (-12810) (2140) (50) (2950) (4090) (910) (10) (470) (600) (360) (100) (220) (-12590) (1200) (1720) (300) (1530) (3750) (1630) (770) (60) (130) (700) (30) (300) (50) (1390) (-13820) (3760) (200) (260) (2920) (1320) (1650) (520) (640) (870) (290) (530) (590) (-13380) (2820) (1840) (350) (260) (960) (2750) (670) (560) (1310) (1680) (180) (20) (100) (-13010) (1600) (1480) (630) (1850) (80) (2020) (530) (470) (1820) (1230) (210) (1410) (20) (-12630) (540) (200) (280) (5140) (150) (60) (380) (2400) (520) (290) (-10820) (160) (1340) (210) (4360) (250) (1960) (220) (740) (170) (4050) (40) (-15210) (830) (2890) (640) (2160) (260) (2900) (340) (1220) (10) (2820) (630) (40) (-16170) (1790) (4210) (640) (200) (220) (2610) (640) (2950) (620) (1520) (320) (810) (-17570) (2960) (3480) (760) (910) (900) (280) (770) (4330) (1150) (410) (620) (80) (320) (-17510) (4100) (1830) (1180) (1360) (820) (520) (910) (3910) (490) (860) (350) (530) (410) (-12190) (0) (1710) (450) (980) (2760) (920) (2040) (810) (360) (1250) (1370) (-13260) (1790) (500) (670) (4730) (580) (350) (370) (430) (1900) (2070) (-13700) (1410) (1430) (80) (4530) (500) (420) (810) (900) (990) (2380) (-13380) (50) (930) (1960) (390) (3050) (90) (290) (3480) (230) (620) (1730) (-13950) (780) (780) (540) (2480) (690) (890) (80) (470) (4450) (1150) (880) (-12770) (260) (1500) (270) (2130) (140) (720) (640) (180) (4510) (2250) (1010) (-13200) (250) (1990) (40) (30) (200) (1980) (450) (740) (860) (3020) (3160) (1130) (-13480) (670) (100) (250) (1920) (30) (1220) (360) (1920) (900) (1370) (4020) (1160) (-13990) (470) (120) (1230) (2300) (190) (310) (260) (2870) (500) (410) (4210) (250) (-13330) (720) (720) (1640) (2310) (80) (160) (260) (1780) (1480) (950) (1760) (1620) (-13090) (850) (1040) (1920) (1920) (250) (270) (50) (530) (3060) (110) (890) (2200) (360) (140) (-12780) (1100) (1000) (1910) (180) (300) (1290) (290) (490) (730) (290) (2500) (1040) (970) (80) (640) (-11630) (1280) (820) (460) (110) (1570) (510) (810) (320) (490) (920) (2460) (420) (290) (280) (760) (760))) :lvel (quote ((100) (109) (103) (106) (108) (112) (107) (78) (125) (104) (59) (97) (106) (95) (101) (108) (109) (105) (105) (77) (109) (52) (106) (101) (103) (95) (106) (90) (111) (78) (101) (103) (111) (105) (109) (103) (89) (100) (86) (80) (113) (98) (101) (112) (108) (113) (99) (82) (83) (96) (83) (116) (94) (100) (113) (112) (117) (93) (75) (86) (93) (82) (117) (93) (99) (115) (111) (122) (85) (91) (69) (92) (81) (119) (119) (95) (100) (109) (126) (53) (76) (96) (65) (91) (81) (121) (121) (99) (101) (106) (69) (53) (101) (61) (124) (92) (84) (121) (103) (102) (103) (64) (58) (127) (104) (60) (94) (88) (101) (121) (105) (104) (63) (61) (106) (59) (97) (93) (97) (119) (108) (69) (60) (108) (94) (60) (99) (100) (116) (110) (76) (54) (51) (76) (61) (92) (108) (62) (102) (126) (81) (103) (112) (112) (59) (52) (90) (82) (63) (108) (84) (105) (65) (122) (108) (114) (106) (126) (53) (65) (90) (87) (65) (108) (107) (115) (119) (105) (67) (122) (52) (70) (58) (90) (88) (52) (117) (109) (90) (102) (106) (68) (116) (69) (118) (76) (91) (64) (90) (59) (119) (111) (97) (114) (89) (105) (70) (114) (93) (80) (70) (91) (66) (122) (113) (92) (112) (85) (124) (116) (103) (111) (96) (91) (72) (82) (75) (126) (116) (88) (110) (125) (117) (78) (100) (108) (100) (89) (75) (80) (83) (118) (85) (108) (127) (118) (77) (86) (102) (105) (121) (83) (83) (81) (106) (118) (90) (61) (76) (82) (105) (102) (123) (83) (119) (104) (76) (84) (123) (84) (54) (72) (75) (107) (124) (100) (85) (120) (102) (68) (83) (79) (117) (94) (66) (68) (123) (89) (110) (96) (120) (101) (60) (74) (80) (98) (112) (97) (58) (60) (121) (94) (120) (101) (112) (94) (53) (70) (101) (100) (109) (75) (53) (119) (100) (120) (102) (114) (92) (67) (103) (102) (105) (68) (116) (119) (103) (104) (114) (67) (92) (104) (104) (103) (62) (113) (117) (106) (107) (69) (105) (105) (114) (93) (101) (56) (110) (125) (114) (110) (109) (70) (105) (106) (113) (100) (95) (51) (126) (121) (107) (110) (114) (111) (105) (107) (72) (97) (111) (98) (122) (118) (105) (106) (107) (105) (117) (75) (112) (94) (108) (100) (113) (119) (105) (104) (102) (103) (52) (79) (120) (114) (91) (106) (101) (110) (103) (117) (101) (103) (98) (56) (83) (122) (115) (87) (104) (103) (100) (95) (106) (115) (102) (94) (62) (87) (122) (82) (116) (52) (102) (94) (88) (103) (114) (69) (102) (91) (94) (79) (122) (117) (55) (100) (86) (82) (101) (112) (76) (95) (102) (76) (94) (122) (57) (117) (96) (51) (109) (79) (77) (97) (52) (111) (75) (83) (100) (103) (96) (56) (121) (116) (90) (112) (55) (73) (74) (93) (75) (57) (111) (54) (89) (102) (105) (99) (119) (115) (85) (114) (59))) :loffset (quotelchan (quotelegato 0)))) (load-port-info newobj (quoteinit-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.06 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale onset measure)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 1751 859) (om-make-point 79 38) 0 1 (quote :normal) (quote t) nil 0 1)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 169 45) (quote "change this value to$ increase/decrease speed") "" (om-make-point 246 154) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 5 0 nil 0) (6 0 5 1 nil 0) (3 0 6 0 nil 0) (15 0 7 0 nil 0) (8 0 9 0 nil 0) (1 0 9 1 nil 0) (13 0 11 0 nil 0) (0 0 11 1 nil 0) (2 0 14 0 nil 0) (11 0 15 1 nil 0) (9 0 15 2 nil 0) (5 0 15 3 nil 0) (14 0 15 4 nil 0))) nil 7.06))
